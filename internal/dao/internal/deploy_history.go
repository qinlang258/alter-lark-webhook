// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// DeployHistoryDao is the data access object for table deploy_history.
type DeployHistoryDao struct {
	table   string               // table is the underlying table name of the DAO.
	group   string               // group is the database configuration group name of current DAO.
	columns DeployHistoryColumns // columns contains all the column names of Table for convenient usage.
}

// DeployHistoryColumns defines and stores column names for table deploy_history.
type DeployHistoryColumns struct {
	Id            string //
	WorkflowName  string // workflow的name
	GitlabUrl     string // gitlab的地址
	ServiceName   string // 服务名
	ServiceId     string // 服务ID
	K8SCluster    string // 所属K8S环境
	Env           string // 所属环境,qa/dev/prod/ops类似
	Branch        string // 构建时的分支名
	Image         string // 构建成功的镜像地址
	DeployTime    string // 提交构建的时间
	CommitId      string // gitlab提交的ID
	CommitMessage string // gitlab构建时候的提交信息
	CommitEmail   string // 构建提交的email
	CommitTime    string // 构建的时间
	Status        string // 构建的状态
	Operator      string // 构建人
	Type          string // 历史类型,是CI还是CD
	Result        string // 构建状态,0代表成功,其他任何数值代表失败
}

// deployHistoryColumns holds the columns for table deploy_history.
var deployHistoryColumns = DeployHistoryColumns{
	Id:            "id",
	WorkflowName:  "workflow_name",
	GitlabUrl:     "gitlab_url",
	ServiceName:   "service_name",
	ServiceId:     "service_id",
	K8SCluster:    "k8s_cluster",
	Env:           "env",
	Branch:        "branch",
	Image:         "image",
	DeployTime:    "deploy_time",
	CommitId:      "commit_id",
	CommitMessage: "commit_message",
	CommitEmail:   "commit_email",
	CommitTime:    "commit_time",
	Status:        "status",
	Operator:      "operator",
	Type:          "type",
	Result:        "result",
}

// NewDeployHistoryDao creates and returns a new DAO object for table data access.
func NewDeployHistoryDao() *DeployHistoryDao {
	return &DeployHistoryDao{
		group:   "default",
		table:   "deploy_history",
		columns: deployHistoryColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *DeployHistoryDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *DeployHistoryDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *DeployHistoryDao) Columns() DeployHistoryColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *DeployHistoryDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *DeployHistoryDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *DeployHistoryDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
