// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// GitlabProjectsDao is the data access object for table gitlab_projects.
type GitlabProjectsDao struct {
	table   string                // table is the underlying table name of the DAO.
	group   string                // group is the database configuration group name of current DAO.
	columns GitlabProjectsColumns // columns contains all the column names of Table for convenient usage.
}

// GitlabProjectsColumns defines and stores column names for table gitlab_projects.
type GitlabProjectsColumns struct {
	Id                 string // 就是在git仓库上查看到的Project ID
	HttpUrlToRepo      string // git的url地址
	Description        string // 仓库描述信息
	WebhookEnabled     string // 1表示允许该gitlab仓库通过webhook触发ci,0表示不允许
	WebhookBranchOrTag string // 当gitlab仓库允许webhook触发ci时,再次判断分支或tag,只有在指定范围内的才允许触发,如果为空,则表示允许所有分支/tag触发
	UiMergeEnabled     string // 1表示允许该gitlab仓库开启前端合并功能, 0表示不允许
	CiPipeline         string // ci时使用的pipeline名称
	Developers         string // commit记录中的最近5个提交者的邮箱地址
	LastCommitTime     string // 该gitlab仓库最后一次commit的时间
}

// gitlabProjectsColumns holds the columns for table gitlab_projects.
var gitlabProjectsColumns = GitlabProjectsColumns{
	Id:                 "id",
	HttpUrlToRepo:      "http_url_to_repo",
	Description:        "description",
	WebhookEnabled:     "webhook_enabled",
	WebhookBranchOrTag: "webhook_branch_or_tag",
	UiMergeEnabled:     "ui_merge_enabled",
	CiPipeline:         "ci_pipeline",
	Developers:         "developers",
	LastCommitTime:     "last_commit_time",
}

// NewGitlabProjectsDao creates and returns a new DAO object for table data access.
func NewGitlabProjectsDao() *GitlabProjectsDao {
	return &GitlabProjectsDao{
		group:   "default",
		table:   "gitlab_projects",
		columns: gitlabProjectsColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *GitlabProjectsDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *GitlabProjectsDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *GitlabProjectsDao) Columns() GitlabProjectsColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *GitlabProjectsDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *GitlabProjectsDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *GitlabProjectsDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
