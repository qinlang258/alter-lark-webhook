// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// AuditLogDao is the data access object for table audit_log.
type AuditLogDao struct {
	table   string          // table is the underlying table name of the DAO.
	group   string          // group is the database configuration group name of current DAO.
	columns AuditLogColumns // columns contains all the column names of Table for convenient usage.
}

// AuditLogColumns defines and stores column names for table audit_log.
type AuditLogColumns struct {
	TimestampMs  string // 精确到毫秒的时间戳
	TraceId      string // 调用链id
	Email        string // 具体用户
	CreationTime string // 请求时间
	Url          string // 请求的具体url
	Method       string // http请求方法,当前都是post
	Body         string // post请求的完整参数, json格式
}

// auditLogColumns holds the columns for table audit_log.
var auditLogColumns = AuditLogColumns{
	TimestampMs:  "timestamp_ms",
	TraceId:      "trace_id",
	Email:        "email",
	CreationTime: "creation_time",
	Url:          "url",
	Method:       "method",
	Body:         "body",
}

// NewAuditLogDao creates and returns a new DAO object for table data access.
func NewAuditLogDao() *AuditLogDao {
	return &AuditLogDao{
		group:   "default",
		table:   "audit_log",
		columns: auditLogColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *AuditLogDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *AuditLogDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *AuditLogDao) Columns() AuditLogColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *AuditLogDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *AuditLogDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *AuditLogDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
