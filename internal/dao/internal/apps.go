// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// AppsDao is the data access object for table apps.
type AppsDao struct {
	table   string      // table is the underlying table name of the DAO.
	group   string      // group is the database configuration group name of current DAO.
	columns AppsColumns // columns contains all the column names of Table for convenient usage.
}

// AppsColumns defines and stores column names for table apps.
type AppsColumns struct {
	ServiceId   string //
	ServiceName string // 服务名,需要满足k8s-ns的要求
	GitlabId    string // gitlab仓库的id号,云雀平台需要使用,外键引用gitlab_projects表
	HelmChart   string // helm chart的名字
	K8SCluster  string // 生产环境的k8s名称,决定了服务部署到哪个k8s集群
	Namespace   string // k8s的namespace信息
	Workload    string // k8s workload的类型，是deployment，还是sts
	Envs        string // 该服务所属的环境, json的字符串数组格式
	Labels      string // json的对象格式, 应用的所有标签
}

// appsColumns holds the columns for table apps.
var appsColumns = AppsColumns{
	ServiceId:   "service_id",
	ServiceName: "service_name",
	GitlabId:    "gitlab_id",
	HelmChart:   "helm_chart",
	K8SCluster:  "k8s_cluster",
	Namespace:   "namespace",
	Workload:    "workload",
	Envs:        "envs",
	Labels:      "labels",
}

// NewAppsDao creates and returns a new DAO object for table data access.
func NewAppsDao() *AppsDao {
	return &AppsDao{
		group:   "default",
		table:   "apps",
		columns: appsColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *AppsDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *AppsDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *AppsDao) Columns() AppsColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *AppsDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *AppsDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *AppsDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
