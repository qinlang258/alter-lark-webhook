// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// PortalDao is the data access object for table portal.
type PortalDao struct {
	table   string        // table is the underlying table name of the DAO.
	group   string        // group is the database configuration group name of current DAO.
	columns PortalColumns // columns contains all the column names of Table for convenient usage.
}

// PortalColumns defines and stores column names for table portal.
type PortalColumns struct {
	Id          string //
	Url         string //
	Path        string //
	Title       string //
	Description string //
	Env         string //
	Sort        string //
}

// portalColumns holds the columns for table portal.
var portalColumns = PortalColumns{
	Id:          "id",
	Url:         "url",
	Path:        "path",
	Title:       "title",
	Description: "description",
	Env:         "env",
	Sort:        "sort",
}

// NewPortalDao creates and returns a new DAO object for table data access.
func NewPortalDao() *PortalDao {
	return &PortalDao{
		group:   "default",
		table:   "portal",
		columns: portalColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *PortalDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *PortalDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *PortalDao) Columns() PortalColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *PortalDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *PortalDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *PortalDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
